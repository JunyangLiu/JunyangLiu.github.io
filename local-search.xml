<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>一起来学binder — cpp端代码生成</title>
    <link href="/2021/01/09/cpp-binder-gen/"/>
    <url>/2021/01/09/cpp-binder-gen/</url>
    
    <content type="html"><![CDATA[<blockquote><p>操作系统：Windows 10 专业版 19042.685<br>编译机：WSL2 Ubuntu-18.04<br>手机：Google Pixel 1<br>源码版本：AOSP android-7.1.1_r35</p></blockquote><h2 id="1，创建aidl文件"><a href="#1，创建aidl文件" class="headerlink" title="1，创建aidl文件"></a>1，创建aidl文件</h2><p>ITest.aidl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ITest</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ping</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2，用aidl-cpp工具生成cpp端接口实现"><a href="#2，用aidl-cpp工具生成cpp端接口实现" class="headerlink" title="2，用aidl-cpp工具生成cpp端接口实现"></a>2，用aidl-cpp工具生成cpp端接口实现</h2><p>在aosp源码下载操作，详细生成结果见Github: <a href="https://github.com/hqw700/binderdemo/releases/tag/v0.2">https://github.com/hqw700/binderdemo/releases/tag/v0.2</a> </p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta">$</span><span class="bash"> mkdir -p frameworks/native/cmds/binderdemo/cpp/include</span><br><span class="hljs-meta">$</span><span class="bash"> out/host/linux-x86/bin/aidl-cpp frameworks/native/cmds/binderdemo/ITest.aidl frameworks/native/cmds/binderdemo/cpp/include/ frameworks/native/cmds/binderdemo/cpp/ITest.cpp</span><br><span class="hljs-meta">$</span><span class="bash"> tree frameworks/native/cmds/binderdemo/cpp</span><br>frameworks/native/cmds/binderdemo/cpp<br>├── ITest.cpp<br>└── include<br>    └── demo<br>        ├── BnTest.h<br>        ├── BpTest.h<br>        └── ITest.h<br></code></pre></td></tr></table></figure><h2 id="3，binder服务端代码"><a href="#3，binder服务端代码" class="headerlink" title="3，binder服务端代码"></a>3，binder服务端代码</h2><p>和测试代码main.cpp在同一文件下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> :</span> <span class="hljs-keyword">public</span> demo::BnTest &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">binder::Status <span class="hljs-title">ping</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        INFO(<span class="hljs-string">&quot;ping receive ok&quot;</span>);<br>        <span class="hljs-keyword">return</span> binder::Status();<br>    &#125;<br><br>    <span class="hljs-function">binder::Status <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int32_t</span> v1, <span class="hljs-keyword">int32_t</span> v2, <span class="hljs-keyword">int32_t</span> *_aidl_return)</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        INFO(<span class="hljs-string">&quot;sum: %d + %d&quot;</span>, v1, v2);<br>        *_aidl_return = v1 + v2;<br>        <span class="hljs-keyword">return</span> binder::Status();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="4，测试类main-cpp"><a href="#4，测试类main-cpp" class="headerlink" title="4，测试类main.cpp"></a>4，测试类main.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LOG_TAG <span class="hljs-meta-string">&quot;cpp_binder&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;utils/RefBase.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;utils/Log.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;binder/TextOutput.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;binder/IInterface.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;binder/IBinder.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;binder/ProcessState.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;binder/IServiceManager.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;binder/IPCThreadState.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;demo/ITest.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;demo/BnTest.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> BINDER_NAME <span class="hljs-meta-string">&quot;test_server&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> android;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INFO(...) \</span><br>    <span class="hljs-keyword">do</span> &#123; \<br>        <span class="hljs-built_in">printf</span>(__VA_ARGS__); \<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>); \<br>        ALOGD(__VA_ARGS__); \<br>    &#125; <span class="hljs-keyword">while</span>(<span class="hljs-number">0</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">assert_fail</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *file, <span class="hljs-keyword">int</span> line, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *func, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *expr)</span> </span>&#123;<br>    INFO(<span class="hljs-string">&quot;assertion failed at file %s, line %d, function %s:&quot;</span>,<br>         file, line, func);<br>    INFO(<span class="hljs-string">&quot;%s&quot;</span>, expr);<br>    <span class="hljs-built_in">abort</span>();<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ASSERT(e) \</span><br>    <span class="hljs-keyword">do</span> &#123; \<br>        <span class="hljs-keyword">if</span> (!(e)) \<br>            assert_fail(__FILE__, __LINE__, __func__, <span class="hljs-meta">#e); \</span><br>    &#125; <span class="hljs-keyword">while</span>(<span class="hljs-number">0</span>)<br><br><span class="hljs-comment">// ################# For binder server start #####################</span><br>class Test : <span class="hljs-keyword">public</span> demo::BnTest &#123;<br><span class="hljs-keyword">public</span>:<br>    binder::Status ping() <span class="hljs-keyword">override</span> &#123;<br>        INFO(<span class="hljs-string">&quot;server: ping receive ok&quot;</span>);<br>        <span class="hljs-keyword">return</span> binder::Status();<br>    &#125;<br><br>    binder::Status sum(<span class="hljs-keyword">int32_t</span> v1, <span class="hljs-keyword">int32_t</span> v2, <span class="hljs-keyword">int32_t</span> *_aidl_return) <span class="hljs-keyword">override</span> &#123;<br>        INFO(<span class="hljs-string">&quot;server: sum: %d + %d&quot;</span>, v1, v2);<br>        *_aidl_return = v1 + v2;<br>        <span class="hljs-keyword">return</span> binder::Status();<br>    &#125;<br>&#125;;<br><span class="hljs-comment">// ################# For binder server end #####################</span><br><br><span class="hljs-keyword">int</span> main(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> **argv) &#123;<br>    <span class="hljs-keyword">if</span> (argc == <span class="hljs-number">1</span>) &#123;<br>        defaultServiceManager()-&gt;addService(String16(BINDER_NAME), <span class="hljs-keyword">new</span> Test());<br>        ProcessState::self()-&gt;startThreadPool();<br>        INFO(<span class="hljs-string">&quot;server: This is TestServer&quot;</span>);<br>        IPCThreadState::self()-&gt;joinThreadPool();<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (argc == <span class="hljs-number">3</span>) &#123;<br>        INFO(<span class="hljs-string">&quot;client: We&#x27;re the client&quot;</span>);<br>        sp&lt;IServiceManager&gt; sm = defaultServiceManager();<br>        ASSERT(sm != <span class="hljs-number">0</span>);<br>        sp&lt;IBinder&gt; binder = sm-&gt;getService(String16(BINDER_NAME));<br>        ASSERT(binder != <span class="hljs-number">0</span>);<br>        sp&lt;demo::ITest&gt; test = interface_cast&lt;demo::ITest&gt;(binder);<br>        ASSERT(test != <span class="hljs-number">0</span>);<br>        INFO(<span class="hljs-string">&quot;client: ping&quot;</span>);<br>        test-&gt;ping();<br>        <span class="hljs-keyword">int</span> ret = <span class="hljs-number">0</span>;<br>        test-&gt;sum(atoi(argv[<span class="hljs-number">1</span>]), atoi(argv[<span class="hljs-number">2</span>]), &amp;ret);<br>        INFO(<span class="hljs-string">&quot;client: We&#x27;re the client: test-&gt;sum return: %d&quot;</span>, ret);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5，Android-mk-与-CMakeLists-txt-文件"><a href="#5，Android-mk-与-CMakeLists-txt-文件" class="headerlink" title="5，Android.mk 与 CMakeLists.txt 文件"></a>5，Android.mk 与 CMakeLists.txt 文件</h2><p>Android.mk 用于系统编译，CMakeLists.txt 文件用于clion索引，顺便用clion将每个文件重新format了。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs makefile">LOCAL_PATH:= <span class="hljs-variable">$(<span class="hljs-built_in">call</span> my-<span class="hljs-built_in">dir</span>)</span><br><span class="hljs-keyword">include</span> <span class="hljs-variable">$(CLEAR_VARS)</span><br><br>LOCAL_SRC_FILES:= \<br>    main.cpp \<br>    ITest.cpp<br><br>LOCAL_C_INCLUDES := <span class="hljs-variable">$(LOCAL_PATH)</span>/<span class="hljs-keyword">include</span><br><br>LOCAL_CFLAGS += -Wall<br><br>LOCAL_SHARED_LIBRARIES := \<br>    libcutils \<br>    liblog \<br>    libandroidfw \<br>    libutils \<br>    libbinder<br><br>LOCAL_MODULE:= cpp_binder_test<br><br><span class="hljs-keyword">include</span> <span class="hljs-variable">$(BUILD_EXECUTABLE)</span><br></code></pre></td></tr></table></figure><h2 id="6，编译并push进系统"><a href="#6，编译并push进系统" class="headerlink" title="6，编译并push进系统"></a>6，编译并push进系统</h2><p>编译</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta">$</span><span class="bash"> mmm frameworks/native/cmds/binderdemo/cpp/</span><br><span class="hljs-meta">[100%</span><span class="bash"> 7/7] Install: out/target/product/sailfish/system/bin/cpp_binder_test</span><br>make: Leaving directory &#x27;/home/huangqw/code/aosp&#x27;<br><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">### make completed successfully (1 seconds) ####</span></span><br></code></pre></td></tr></table></figure><p>push</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta">$</span><span class="bash"> adb root &amp;&amp; adb remount</span><br><span class="hljs-meta">$</span><span class="bash"> adb push cpp_binder_test  /system/bin/</span><br></code></pre></td></tr></table></figure><h2 id="7，测试"><a href="#7，测试" class="headerlink" title="7，测试"></a>7，测试</h2><p>启动服务端</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta">$</span><span class="bash"> adb shell</span><br>sailfish:/ # cpp_binder_test<br>server: This is TestServer<br><br></code></pre></td></tr></table></figure><p>查看Binder服务：<br>第一个就是了</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta">$</span><span class="bash"> adb shell service list | grep test_</span><br>0       test_server: [demo.ITest]<br></code></pre></td></tr></table></figure><p>客户端测试：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta">$</span><span class="bash"> adb shell</span><br>sailfish:/ # cpp_binder_test 1 2<br>client: We&#x27;re the client<br>client: ping<br>client: We&#x27;re the client: test-&gt;sum return: 3<br></code></pre></td></tr></table></figure><p>和上一章java端的应用和可以通信</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs console">sailfish:/ # java_binder_test 2 3<br>5<br></code></pre></td></tr></table></figure><p>log</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs log">1973-02-06 15:13:29.710 2648-2648&#x2F;? D&#x2F;cpp_binder: server: This is TestServer<br>1973-02-06 15:13:33.266 2651-2651&#x2F;? D&#x2F;cpp_binder: client: We&#39;re the client<br>1973-02-06 15:13:33.270 2651-2651&#x2F;? D&#x2F;cpp_binder: client: ping<br>1973-02-06 15:13:33.270 2648-2649&#x2F;? D&#x2F;cpp_binder: server: ping receive ok<br>1973-02-06 15:13:33.271 2648-2648&#x2F;? D&#x2F;cpp_binder: server: sum: 1 + 2<br>1973-02-06 15:13:33.272 2651-2651&#x2F;? D&#x2F;cpp_binder: client: We&#39;re the client: test-&gt;sum return: 3<br><br>1973-02-06 15:38:07.240 2783-2783&#x2F;? D&#x2F;JAVA_BINDER.Client: This is TestClient<br>1973-02-06 15:38:07.242 2783-2783&#x2F;? D&#x2F;JAVA_BINDER.Client: ping<br>1973-02-06 15:38:07.243 2648-2650&#x2F;? D&#x2F;cpp_binder: server: ping receive ok<br>1973-02-06 15:38:07.243 2783-2783&#x2F;? D&#x2F;JAVA_BINDER.Client: sum (2,3)<br>1973-02-06 15:38:07.243 2648-2649&#x2F;? D&#x2F;cpp_binder: server: sum: 2 + 3<br>1973-02-06 15:38:07.244 2783-2783&#x2F;? D&#x2F;JAVA_BINDER.Client: sum (2,3) return 5<br></code></pre></td></tr></table></figure><h2 id="8，源码"><a href="#8，源码" class="headerlink" title="8，源码"></a>8，源码</h2><p>这个binder系列会持续更新，逐渐完善更多的用法，本章节的代码在tag v0.2下：<br><a href="https://github.com/hqw700/binderdemo/releases/tag/v0.2">https://github.com/hqw700/binderdemo/releases/tag/v0.2</a></p>]]></content>
    
    
    <categories>
      
      <category>源码分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android系统</tag>
      
      <tag>教程</tag>
      
      <tag>github</tag>
      
      <tag>binder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一起来学binder — java端代码生成</title>
    <link href="/2021/01/05/java-binder-gen/"/>
    <url>/2021/01/05/java-binder-gen/</url>
    
    <content type="html"><![CDATA[<blockquote><p>操作系统：Windows 10 专业版 19042.685<br>编译机：WSL2 Ubuntu-18.04<br>手机：Google Pixel 1<br>源码版本：AOSP android-7.1.1_r35</p></blockquote><h2 id="1，创建aidl文件"><a href="#1，创建aidl文件" class="headerlink" title="1，创建aidl文件"></a>1，创建aidl文件</h2><p>ITest.aidl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ITest</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ping</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2，用aidl生成ITest-java文件"><a href="#2，用aidl生成ITest-java文件" class="headerlink" title="2，用aidl生成ITest.java文件"></a>2，用aidl生成ITest.java文件</h2><p>在aosp源码下载操作，然后第一步就生成错误了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">~&#x2F;code&#x2F;aosp$ out&#x2F;host&#x2F;linux-x86&#x2F;bin&#x2F;aidl -oframeworks&#x2F;native&#x2F;cmds&#x2F;bindergen&#x2F;java&#x2F;src&#x2F; frameworks&#x2F;native&#x2F;cmds&#x2F;bindergen&#x2F;ITest.aidl<br>frameworks&#x2F;native&#x2F;cmds&#x2F;bindergen&#x2F;ITest.aidl:3 interface ITest should be declared in a file called demo&#x2F;ITest.aidl.<br>aidl E  1991  1991 aidl.cpp:545] Invalid package declaration &#39;demo&#39;<br></code></pre></td></tr></table></figure><p>原来是要在包含包名”demo”的文件夹下生成，只能将原定的文件夹名bindergen改为binderdemo。aidl工具应该是要在完整包路径下执行的，但为了目录结构好看，我放在了根目录。继续执行：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs console">out/host/linux-x86/bin/aidl -oframeworks/native/cmds/binderdemo/java/src/ frameworks/native/cmds/binderdemo/ITest.aidl<br></code></pre></td></tr></table></figure><p>无输出，不过可以看到src目录下多了demo/ITest.java文件</p><h2 id="3，编写binder服务端代码"><a href="#3，编写binder服务端代码" class="headerlink" title="3，编写binder服务端代码"></a>3，编写binder服务端代码</h2><p>java/src/demo/TestServer.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo;<br><br><span class="hljs-keyword">import</span> android.os.RemoteException;<br><span class="hljs-keyword">import</span> android.util.Log;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestServer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ITest</span>.<span class="hljs-title">Stub</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String TAG = <span class="hljs-string">&quot;JAVA_BINDER.Server&quot;</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ping</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RemoteException </span>&#123;<br>        Log.d(TAG, <span class="hljs-string">&quot;ping receive ok&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> <span class="hljs-keyword">throws</span> RemoteException </span>&#123;<br>        Log.d(TAG, <span class="hljs-string">&quot;sum &quot;</span> + x + <span class="hljs-string">&quot; + &quot;</span> + y);<br>        <span class="hljs-keyword">return</span> x + y;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4，编写测试类Main-java"><a href="#4，编写测试类Main-java" class="headerlink" title="4，编写测试类Main.java"></a>4，编写测试类Main.java</h2><p>将binder客户端和服务端合在一起，带参数执行为客户端，不带参数执行为服务端。<br>java/src/demo/Main.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo;<br><br><span class="hljs-keyword">import</span> android.os.RemoteException;<br><span class="hljs-keyword">import</span> android.os.ServiceManager;<br><span class="hljs-keyword">import</span> android.util.Log;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String TAG_S = <span class="hljs-string">&quot;JAVA_BINDER.Server&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String TAG_C = <span class="hljs-string">&quot;JAVA_BINDER.Client&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String BINDER_NAME = <span class="hljs-string">&quot;test_server&quot;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> len = args.length;<br>        <span class="hljs-keyword">if</span> (len == <span class="hljs-number">0</span>) &#123;<br>            Log.d(TAG_S, <span class="hljs-string">&quot;This is TestServer&quot;</span>);<br>            TestServer testServer = <span class="hljs-keyword">new</span> TestServer();<br>            ServiceManager.addService(BINDER_NAME, testServer);<br>            <span class="hljs-keyword">for</span> (;;);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            Log.d(TAG_C, <span class="hljs-string">&quot;This is TestClient&quot;</span>);<br>            ITest testClient = ITest.Stub.asInterface(ServiceManager.getService(BINDER_NAME));<br>            <span class="hljs-keyword">if</span> (testClient == <span class="hljs-keyword">null</span>) &#123;<br>                System.err.println(<span class="hljs-string">&quot;TestServer is null&quot;</span>);<br>                System.exit(-<span class="hljs-number">1</span>);<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Log.d(TAG_C, <span class="hljs-string">&quot;ping&quot;</span>);<br>                testClient.ping();<br><br>                <span class="hljs-keyword">int</span> v1 = Integer.parseInt(args[<span class="hljs-number">0</span>]);<br>                <span class="hljs-keyword">int</span> v2 = Integer.parseInt(args[<span class="hljs-number">1</span>]);<br>                Log.d(TAG_C, String.format(<span class="hljs-string">&quot;sum (%d,%d)&quot;</span>, v1, v2));<br>                <span class="hljs-keyword">int</span> ret = testClient.sum(v1, v2);<br>                Log.d(TAG_C, String.format(<span class="hljs-string">&quot;sum (%d,%d) return %d&quot;</span>, v1, v2, ret));<br>                System.out.println(ret);<br>            &#125; <span class="hljs-keyword">catch</span> (RemoteException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            System.exit(<span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5，编写可以执行文件java-binder-test和Android-mk"><a href="#5，编写可以执行文件java-binder-test和Android-mk" class="headerlink" title="5，编写可以执行文件java_binder_test和Android.mk"></a>5，编写可以执行文件java_binder_test和Android.mk</h2><p>java/java_binder_test</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> shell.</span><br><span class="hljs-meta">#</span><span class="bash"> -agentlib:jdwp=transport=dt_socket,<span class="hljs-built_in">suspend</span>=y,server=y,address=5005</span><br>base=/system<br>export CLASSPATH=$base/framework/java_binder_test.jar<br>exec app_process $base/bin demo.Main &quot;$@&quot;<br></code></pre></td></tr></table></figure><p>java/Android.mk</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Makefile">LOCAL_PATH:= <span class="hljs-variable">$(<span class="hljs-built_in">call</span> my-<span class="hljs-built_in">dir</span>)</span><br><br><span class="hljs-keyword">include</span> <span class="hljs-variable">$(CLEAR_VARS)</span><br>LOCAL_SRC_FILES := <span class="hljs-variable">$(<span class="hljs-built_in">call</span> all-subdir-java-files)</span><br>LOCAL_MODULE := java_binder_test<br><span class="hljs-keyword">include</span> <span class="hljs-variable">$(BUILD_JAVA_LIBRARY)</span><br><br><span class="hljs-keyword">include</span> <span class="hljs-variable">$(CLEAR_VARS)</span><br>LOCAL_MODULE := java_binder_test<br>LOCAL_SRC_FILES := java_binder_test<br>LOCAL_MODULE_CLASS := EXECUTABLES<br>LOCAL_MODULE_TAGS := optional<br><span class="hljs-keyword">include</span> <span class="hljs-variable">$(BUILD_PREBUILT)</span><br></code></pre></td></tr></table></figure><h2 id="6，编译"><a href="#6，编译" class="headerlink" title="6，编译"></a>6，编译</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs log">$ cd binderdemo&#x2F;java<br>$ mm | tee<br>[ 12% 1&#x2F;8] target Prebuilt: java_binder_test (out&#x2F;target&#x2F;product&#x2F;sailfish&#x2F;obj&#x2F;EXECUTABLES&#x2F;java_binder_test_intermediates&#x2F;java_binder_test)<br>[ 25% 2&#x2F;8] Install: out&#x2F;target&#x2F;product&#x2F;sailfish&#x2F;system&#x2F;bin&#x2F;java_binder_test<br>[ 37% 3&#x2F;8] Ensure Jack server is installed and started<br>Jack server already installed in &quot;&#x2F;home&#x2F;huangqw&#x2F;.jack-server&quot;<br>Launching Jack server java -XX:MaxJavaStackTraceDepth&#x3D;-1 -Djava.io.tmpdir&#x3D;&#x2F;tmp -Dfile.encoding&#x3D;UTF-8 -XX:+TieredCompilation -cp &#x2F;home&#x2F;huangqw&#x2F;.jack-server&#x2F;launcher.jar com.android.jack.launcher.ServerLauncher<br>[ 50% 4&#x2F;8] Building with Jack: out&#x2F;target&#x2F;common&#x2F;obj&#x2F;JAVA_LIBRARIES&#x2F;java_binder_test_intermediates&#x2F;with-local&#x2F;classes.dex<br>[ 62% 5&#x2F;8] Copying: out&#x2F;target&#x2F;common&#x2F;obj&#x2F;JAVA_LIBRARIES&#x2F;java_binder_test_intermediates&#x2F;classes.dex<br>[ 75% 6&#x2F;8] target Jar: java_binder_test (out&#x2F;target&#x2F;common&#x2F;obj&#x2F;JAVA_LIBRARIES&#x2F;java_binder_test_intermediates&#x2F;javalib.jar)<br>[ 87% 7&#x2F;8] build out&#x2F;target&#x2F;product&#x2F;sailfish&#x2F;obj&#x2F;JAVA_LIBRARIES&#x2F;java_binder_test_intermediates&#x2F;javalib.jar<br>[100% 8&#x2F;8] Install: out&#x2F;target&#x2F;product&#x2F;sailfish&#x2F;system&#x2F;framework&#x2F;java_binder_test.jar<br></code></pre></td></tr></table></figure><p>生成 /system/bin/java_binder_test 和 /system/framework/java_binder_test.jar</p><h2 id="7，push进系统"><a href="#7，push进系统" class="headerlink" title="7，push进系统"></a>7，push进系统</h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta">$</span><span class="bash"> adb root &amp;&amp; adb remount</span><br><span class="hljs-meta">$</span><span class="bash"> adb push /system/framework/java_binder_test.jar /system/framework/java_binder_test.jar</span><br><span class="hljs-meta">$</span><span class="bash"> adb push /system/bin/java_binder_test /system/bin/java_binder_test</span><br><span class="hljs-meta">$</span><span class="bash"> adb reboot</span><br></code></pre></td></tr></table></figure><h2 id="8，测试"><a href="#8，测试" class="headerlink" title="8，测试"></a>8，测试</h2><p>启动服务端</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta">$</span><span class="bash"> adb root</span><br><span class="hljs-meta">$</span><span class="bash"> adb shell java_binder_test</span><br><br></code></pre></td></tr></table></figure><p>查看Binder服务：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta">$</span><span class="bash"> adb shell service list | grep test_</span><br>0       test_server: [demo.ITest]<br></code></pre></td></tr></table></figure><p>客户端测试：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta">$</span><span class="bash"> adb shell java_binder_test 1 2</span><br>3<br></code></pre></td></tr></table></figure><p>log</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs log">1973-02-02 03:03:23.423 2639-2639&#x2F;? D&#x2F;JAVA_BINDER.Server: This is TestServer<br>1973-02-02 03:04:37.269 2652-2652&#x2F;? D&#x2F;JAVA_BINDER.Client: This is TestClient<br>1973-02-02 03:04:37.270 2652-2652&#x2F;? D&#x2F;JAVA_BINDER.Client: ping<br>1973-02-02 03:04:37.270 2639-2647&#x2F;? D&#x2F;JAVA_BINDER.Server: ping receive ok<br>1973-02-02 03:04:37.271 2652-2652&#x2F;? D&#x2F;JAVA_BINDER.Client: sum (1,2)<br>1973-02-02 03:04:37.271 2639-2648&#x2F;? D&#x2F;JAVA_BINDER.Server: sum 1 + 2<br>1973-02-02 03:04:37.271 2652-2652&#x2F;? D&#x2F;JAVA_BINDER.Client: sum (1,2) return 3<br></code></pre></td></tr></table></figure><h2 id="9，源码"><a href="#9，源码" class="headerlink" title="9，源码"></a>9，源码</h2><p>这个binder系列会持续更新，逐渐完善更多的用法，本章节的代码在tag v0.1下：<br><a href="https://github.com/hqw700/binderdemo/releases/tag/v0.1">https://github.com/hqw700/binderdemo/releases/tag/v0.1</a></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">binderdemo<br>├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ITest</span>.</span></span>aidl<br>└── java<br>    ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Android</span>.</span></span>mk<br>    ├── java_binder_test<br>    └── src<br>        └── demo<br>            ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ITest</span>.</span></span>java<br>            ├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Main</span>.</span></span>java<br>            └── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TestServer</span>.</span></span>java<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>源码分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android系统</tag>
      
      <tag>教程</tag>
      
      <tag>github</tag>
      
      <tag>binder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pixel 3上Linux内核源码的下载，编译与烧录</title>
    <link href="/2021/01/02/aosp-kernel-build/"/>
    <url>/2021/01/02/aosp-kernel-build/</url>
    
    <content type="html"><![CDATA[<blockquote><p>操作系统：Windows 10 专业版 19042.685<br>编译机：WSL2 Ubuntu-18.04<br>手机：Google Pixel 3 Android 11<br>源码版本：kernel android-msm-crosshatch-4.9-android11</p></blockquote><p>官方教程地址<a href="https://source.android.com/setup/build/building-kernels#id-version">https://source.android.com/setup/build/building-kernels#id-version</a>, 已经写的很详细了, pixel 3建议下载的是android-msm-crosshatch-4.9-android11分支（此处是个坑，后面会提到）</p><h2 id="一，源码下载"><a href="#一，源码下载" class="headerlink" title="一，源码下载"></a>一，源码下载</h2><h3 id="1-1-AOSP源码下载"><a href="#1-1-AOSP源码下载" class="headerlink" title="1.1 AOSP源码下载"></a>1.1 AOSP源码下载</h3><p>依旧是将Google的地址<code>android.googlesource.com</code>替换清华的地址<code>aosp.tuna.tsinghua.edu.cn</code><br>加 <code>--depth 1</code> 控制git深度可以极大节省硬盘空间。最终.repo目录21G左右  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> REPO_URL=<span class="hljs-string">&#x27;https://mirrors.tuna.tsinghua.edu.cn/git/git-repo&#x27;</span><br>repo init --depth 1 -u https://aosp.tuna.tsinghua.edu.cn/kernel/manifest -b android-msm-crosshatch-4.9-android11<br>repo sync -j20<br></code></pre></td></tr></table></figure><h2 id="二，编译"><a href="#二，编译" class="headerlink" title="二，编译"></a>二，编译</h2><h3 id="2-1-编译kernel"><a href="#2-1-编译kernel" class="headerlink" title="2.1 编译kernel"></a>2.1 编译kernel</h3><p>执行build/build.sh即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">~/code/kernel$ ./build/build.sh<br>========================================================<br> Copying modules files<br>  lib/modules/4.9.210-gdee0d123_audio-gee051ba/extra/wlan.ko<br>  lib/modules/4.9.210-gdee0d123_audio-gee051ba/kernel/drivers/input/touchscreen/stm/ftm5.ko<br>  lib/modules/4.9.210-gdee0d123_audio-gee051ba/kernel/drivers/input/touchscreen/sec_ts/sec_touch.ko<br>  lib/modules/4.9.210-gdee0d123_audio-gee051ba/kernel/drivers/input/touchscreen/heatmap.ko<br>  lib/modules/4.9.210-gdee0d123_audio-gee051ba/kernel/drivers/media/v4l2-core/videobuf2-vmalloc.ko<br>  lib/modules/4.9.210-gdee0d123_audio-gee051ba/kernel/drivers/media/v4l2-core/videobuf2-memops.ko<br>  lib/modules/4.9.210-gdee0d123_audio-gee051ba/kernel/techpack/audio/soc/pinctrl-wcd.ko<br>  lib/modules/4.9.210-gdee0d123_audio-gee051ba/kernel/techpack/audio/ipc/wcd-dsp-glink.ko<br>  lib/modules/4.9.210-gdee0d123_audio-gee051ba/kernel/techpack/audio/asoc/snd-soc-sdm845-max98927.ko<br>  lib/modules/4.9.210-gdee0d123_audio-gee051ba/kernel/techpack/audio/asoc/codecs/snd-soc-wcd9xxx.ko<br>  lib/modules/4.9.210-gdee0d123_audio-gee051ba/kernel/techpack/audio/asoc/codecs/snd-soc-cs35l36.ko<br>  lib/modules/4.9.210-gdee0d123_audio-gee051ba/kernel/techpack/audio/asoc/codecs/wcd-core.ko<br>  lib/modules/4.9.210-gdee0d123_audio-gee051ba/kernel/techpack/audio/asoc/codecs/snd-soc-wcd-spi.ko<br>  lib/modules/4.9.210-gdee0d123_audio-gee051ba/kernel/techpack/audio/asoc/codecs/wcd934x/snd-soc-wcd934x.ko<br>  lib/modules/4.9.210-gdee0d123_audio-gee051ba/kernel/techpack/audio/asoc/snd-soc-sdm845.ko<br>========================================================<br> Files copied to /home/huangqw/code/kernel/out/android-msm-pixel-4.9/dist<br></code></pre></td></tr></table></figure><h3 id="2-2-编译kernel报错"><a href="#2-2-编译kernel报错" class="headerlink" title="2.2 编译kernel报错"></a>2.2 编译kernel报错</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">/home/huangqw/code/kernel/private/msm-google/scripts/extract-cert.c:21:10: fatal error: <span class="hljs-string">&#x27;openssl/bio.h&#x27;</span> file not found<br><span class="hljs-comment">#include &lt;openssl/bio.h&gt;</span><br>         ^~~~~~~~~~~~~~~<br>1 error generated.<br>scripts/Makefile.host:101: recipe <span class="hljs-keyword">for</span> target <span class="hljs-string">&#x27;scripts/extract-cert&#x27;</span> failed<br>make[3]: *** [scripts/extract-cert] Error 1<br>make[3]: *** Waiting <span class="hljs-keyword">for</span> unfinished <span class="hljs-built_in">jobs</span>....<br></code></pre></td></tr></table></figure><p>解决：sudo apt-get install libssl-dev</p><h3 id="2-3-打包boot-img"><a href="#2-3-打包boot-img" class="headerlink" title="2.3 打包boot.img"></a>2.3 打包boot.img</h3><p>切换到android11源码目录，将TARGET_PREBUILT_KERNEL设置为kernel生成的Image.lz4文件的路径，官方文档提到的是Image.lz4-dtb，不用理会，android11生成的是Image.lz4。而且不单单是设置这个文件，整个out文件夹都会关联过去。<br>可以用<code>get_build_var BOARD_VENDOR_KERNEL_MODULES</code>命令查看对应的编译环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs log">~&#x2F;code&#x2F;android11$ source build&#x2F;envsetup.sh<br>~&#x2F;code&#x2F;android11$ lunch aosp_blueline-userdebug<br>~&#x2F;code&#x2F;android11$ export TARGET_PREBUILT_KERNEL&#x3D;&#x2F;home&#x2F;huangqw&#x2F;code&#x2F;kernel&#x2F;out&#x2F;android-msm-pixel-4.9&#x2F;dist&#x2F;Image.lz4<br>~&#x2F;code&#x2F;android11$ make -j16 bootimage<br>  PRODUCT_SOONG_NAMESPACES&#x3D;device&#x2F;google&#x2F;crosshatch hardware&#x2F;google&#x2F;av hardware&#x2F;google&#x2F;camera hardware&#x2F;google&#x2F;interfaces hardware&#x2F;google&#x2F;pixel hardware&#x2F;qcom&#x2F;sdm845 vendor&#x2F;google&#x2F;camera vendor&#x2F;qcom&#x2F;sdm845 vendor&#x2F;google&#x2F;interfaces vendor&#x2F;qcom&#x2F;blueline&#x2F;proprietary<br>  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>  Environment variable TARGET_PREBUILT_KERNEL was modified ( &#x3D;&gt; &#x2F;home&#x2F;huangqw&#x2F;code&#x2F;kernel&#x2F;out&#x2F;android-msm-pixel-4.9&#x2F;dist&#x2F;Image.lz4), regenerating...<br>  Environment variable TARGET_PREBUILT_KERNEL was modified ( &#x3D;&gt; &#x2F;home&#x2F;huangqw&#x2F;code&#x2F;kernel&#x2F;out&#x2F;android-msm-pixel-4.9&#x2F;dist&#x2F;Image.lz4), regenerating...<br>  [100% 222&#x2F;222] Target boot image from recovery: out&#x2F;target&#x2F;product&#x2F;blueline&#x2F;boot.img<br><br>#### build completed successfully (01:02 (mm:ss)) ####<br></code></pre></td></tr></table></figure><p>生成out/target/product/blueline/boot.img文件，如要重新编译原来的内核，将<code>export TARGET_PREBUILT_KERNEL=</code>置空重新编译就行</p><h2 id="三，烧录"><a href="#三，烧录" class="headerlink" title="三，烧录"></a>三，烧录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb reboot bootloader           <span class="hljs-comment">## 进入bootloader模式</span><br>fastboot boot boot.img          <span class="hljs-comment">## 从新内核启动，但不烧录，重启会失效</span><br>fastboot flash boot boot.img    <span class="hljs-comment">## 烧录新内核</span><br></code></pre></td></tr></table></figure><h2 id="四，错误"><a href="#四，错误" class="headerlink" title="四，错误"></a>四，错误</h2><p>经过上面的步骤，烧录的内核无法正常启动，无限重启，短暂的logcat中显示内核版本不对。</p><h3 id="4-1-查看内核版本"><a href="#4-1-查看内核版本" class="headerlink" title="4.1 查看内核版本"></a>4.1 查看内核版本</h3><p>手机内：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">adb</span> shell cat /proc/version<br><span class="hljs-attribute">Linux</span> version <span class="hljs-number">4</span>.<span class="hljs-number">9</span>.<span class="hljs-number">223</span>-g<span class="hljs-number">5</span>bded<span class="hljs-number">8</span>e<span class="hljs-number">40</span>b<span class="hljs-number">62</span>-ab<span class="hljs-number">6647920</span> (android-build@abfarm-us-west<span class="hljs-number">1</span>-c-<span class="hljs-number">0040</span>) (Android (<span class="hljs-number">6443078</span> based <span class="hljs-literal">on</span> r<span class="hljs-number">383902</span>) clang version <span class="hljs-number">11</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> (https://android.googlesource.com/toolchain/llvm-project b<span class="hljs-number">397</span>f<span class="hljs-number">81060</span>ce<span class="hljs-number">6</span>d<span class="hljs-number">701042</span>b<span class="hljs-number">782172</span>ed<span class="hljs-number">13</span>bee<span class="hljs-number">898</span>b<span class="hljs-number">79</span>)) #<span class="hljs-number">0</span> SMP PREEMPT Thu Jul <span class="hljs-number">2</span> <span class="hljs-number">03</span>:<span class="hljs-number">22</span>:<span class="hljs-number">48</span> UTC <span class="hljs-number">2020</span><br><span class="hljs-attribute">android</span>-msm-crosshatch-<span class="hljs-number">4</span>.<span class="hljs-number">9</span>-r-beta-<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>编译生成的：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">grep</span> -a &#x27;Linux version&#x27; Image.lz<span class="hljs-number">4</span><br><span class="hljs-attribute">Linux</span> version <span class="hljs-number">4</span>.<span class="hljs-number">9</span>.<span class="hljs-number">232</span> ...<br></code></pre></td></tr></table></figure><h3 id="4-2-切换对应的内核版本"><a href="#4-2-切换对应的内核版本" class="headerlink" title="4.2 切换对应的内核版本"></a>4.2 切换对应的内核版本</h3><p><a href="https://android.googlesource.com/kernel/msm/+/5bded8e40b62">https://android.googlesource.com/kernel/msm/+/5bded8e40b62</a></p><p>根据版本号里的git id提示，找到该版本对应的分支[<a href="https://android.googlesource.com/kernel/msm/+/refs/heads/android-msm-crosshatch-4.9-r-beta-3]">https://android.googlesource.com/kernel/msm/+/refs/heads/android-msm-crosshatch-4.9-r-beta-3]</a>, 切换过去编译，烧录之后系统可以起来了，但是有很多外设报错：蓝牙，音频等，界面黑屏。点开应用之后系统就重启了。后面也尝试了其它的分支版本，依旧是不能正常运行。  </p><h2 id="五，Android-7-1上编译kernel"><a href="#五，Android-7-1上编译kernel" class="headerlink" title="五，Android 7.1上编译kernel"></a>五，Android 7.1上编译kernel</h2><p>之前有在pixel 1 Android7.1上有编译过kernel, 电脑里也有环境，简单再尝试一下。</p><h3 id="5-1-编译和下载"><a href="#5-1-编译和下载" class="headerlink" title="5.1 编译和下载"></a>5.1 编译和下载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir kernel<br>git <span class="hljs-built_in">clone</span> --depth 1 https://aosp.tuna.tsinghua.edu.cn/kernel/msm.git -b android-msm-marlin-3.18-nougat-mr2<br><span class="hljs-built_in">cd</span> msm<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:/home/huangqw/code/aosp/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/bin<br><span class="hljs-built_in">export</span> ARCH=arm64<br><span class="hljs-built_in">export</span> CROSS_COMPILE=aarch64-linux-android-<br><span class="hljs-built_in">export</span> SUBARCH=arm64<br>make marlin_defconfig<br>make -j16<br>croot<br><span class="hljs-built_in">source</span> build/envsetup.sh<br>lunch aosp_sailfish-userdebug<br><span class="hljs-built_in">export</span> TARGET_PREBUILT_KERNEL=/home/huangqw/code/aosp/kernel/msm/arch/arm64/boot/Image.gz-dtb<br>make bootimage<br></code></pre></td></tr></table></figure><h3 id="5-2-烧录"><a href="#5-2-烧录" class="headerlink" title="5.2 烧录"></a>5.2 烧录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb reboot bootloader <br>fastboot flash boot boot.img <br></code></pre></td></tr></table></figure><h3 id="5-3-重启后查看内核信息"><a href="#5-3-重启后查看内核信息" class="headerlink" title="5.3 重启后查看内核信息"></a>5.3 重启后查看内核信息</h3><p>烧录前  </p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tcl">$ adb shell cat /<span class="hljs-keyword">proc</span>/version<br>Linux<span class="hljs-title"> version</span> 3.18.31-g086ab5b (android-build@vpbs30.mtv.corp.google.com) (gcc<span class="hljs-title"> version</span> 4.9.x 20150123 (prerelease) (GCC) ) #1<span class="hljs-title"> SMP</span> PREEMPT<span class="hljs-title"> Thu</span> Feb 16 00:50:36<span class="hljs-title"> UTC</span> 2017  <br></code></pre></td></tr></table></figure><p>烧录后  </p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tcl">$ adb shell cat /<span class="hljs-keyword">proc</span>/version<br>Linux<span class="hljs-title"> version</span> 3.18.31-g6309b4bd (huangqw@DESKTOP-14RLEFF) (gcc<span class="hljs-title"> version</span> 4.9 20150123 (prerelease) (GCC) ) #1<span class="hljs-title"> SMP</span> PREEMPT<span class="hljs-title"> Fri</span> Jan 1 17:20:52<span class="hljs-title"> CST</span> 2021<br></code></pre></td></tr></table></figure><h2 id="六，问题总结"><a href="#六，问题总结" class="headerlink" title="六，问题总结"></a>六，问题总结</h2><p>失败的原因我猜测是内核版本和硬件库版本对不上。而且kernel库又没随aosp版本建分支和打tag, 直接就对应一个android11主分支，这个分支应该是随着最新的android11分支走的，我aosp 11的分支是最早的android-11.0.0_r1，估计我要切换到最新的rxx才能正常运行，由于切换到最新时间比较长，就先不折腾了，后续有空再弄。<br>但pixel可以采用旧版内核，采用旧的方法就行。<br>给大家提供个失败的经验，但主要的流程我觉得是没有问题的。</p>]]></content>
    
    
    <categories>
      
      <category>工具使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android系统</tag>
      
      <tag>教程</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pixel 3上Android 11源码下载，编译与烧录</title>
    <link href="/2021/01/01/aosp-build/"/>
    <url>/2021/01/01/aosp-build/</url>
    
    <content type="html"><![CDATA[<blockquote><p>操作系统：Windows 10 专业版 19042.685<br>编译机：WSL2 Ubuntu-18.04<br>手机：Google Pixel 3<br>源码版本：AOSP android-11.0.0_r1 </p></blockquote><p>研究Android系统最好有一套AOSP源码和一台可以编译运行的机器，下面是我Google Pixel 3上编译官方源码的过程记录。</p><h2 id="一，源码下载"><a href="#一，源码下载" class="headerlink" title="一，源码下载"></a>一，源码下载</h2><h3 id="1-1-AOSP源码下载"><a href="#1-1-AOSP源码下载" class="headerlink" title="1.1 AOSP源码下载"></a>1.1 AOSP源码下载</h3><p>将Google的地址<code>https://android.googlesource.com/kernel/manifest</code>替换清华的地址<code>https://aosp.tuna.tsinghua.edu.cn/platform/manifest</code>下载速度更快<br>加 <code>--depth 1</code> 控制git深度可以极大节省硬盘空间。最终.repo目录21G左右  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> REPO_URL=<span class="hljs-string">&#x27;https://mirrors.tuna.tsinghua.edu.cn/git/git-repo&#x27;</span><br>repo init --depth 1 -u https://aosp.tuna.tsinghua.edu.cn/platform/manifest -b android-11.0.0_r1 <br>repo sync -j20<br></code></pre></td></tr></table></figure><h3 id="1-2-pixel-3专有硬件库下载"><a href="#1-2-pixel-3专有硬件库下载" class="headerlink" title="1.2 pixel 3专有硬件库下载"></a>1.2 pixel 3专有硬件库下载</h3><p>Android 11上不加硬件库会导致刷机后无限重启，但之前pixel 1时没有硬件库也能启动，这里踩了一个坑。<br>记得匹配好对应的BUILD_ID和代码, 查看build/core/build_id.mk文件，我的BUILD_ID=RP1A.200720.009，pixel 3的代号是blueline，所以对应的下载地址是：<br><a href="https://developers.google.cn/android/drivers?hl=zh-cn#bluelinerp1a.200720.009">https://developers.google.cn/android/drivers?hl=zh-cn#bluelinerp1a.200720.009</a><br>将两个文件下载到源码根目录，然后执行，会自动生成vendor文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">~/code/android11$ tar zxvf google_devices-blueline-rp1a.200720.009-6cd41940.tgz<br>~/code/android11$ tar zxvf qcom-blueline-rp1a.200720.009-f772c38c.tgz<br>~/code/android11$ ./extract-google_devices-blueline.sh<br>~/code/android11$ ./extract-qcom-blueline.sh<br></code></pre></td></tr></table></figure><h2 id="二，编译"><a href="#二，编译" class="headerlink" title="二，编译"></a>二，编译</h2><h3 id="2-1-编译环境"><a href="#2-1-编译环境" class="headerlink" title="2.1 编译环境"></a>2.1 编译环境</h3><p>编译环境搭建参考官方文档：<a href="https://source.android.com/setup/build/initializing">https://source.android.com/setup/build/initializing</a><br>我用的win10应用市场下载的wsl2 ubuntu-18.04的虚拟机，挺好用的，不过比较耗内存，建议将内存加到32G</p><h3 id="2-2-编译"><a href="#2-2-编译" class="headerlink" title="2.2 编译"></a>2.2 编译</h3><p>i5-9600k的机器耗时3个小时，有点久。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">~/code/android11$ <span class="hljs-built_in">source</span> build/envsetup.sh<br>~/code/android11$ lunch aosp_blueline-userdebug<br>~/code/android11$ make -j16<br>...<br>[ 99% 90776/91631] //frameworks/base/packages/SystemUI:SystemUI r8 [common]<br>Invalid descriptor (deserialized from Kotlin @Metadata): (LLandroid/animation/Animator;;)L;<br>Invalid descriptor (deserialized from Kotlin @Metadata): (LLandroid/animation/Animator;;)L;<br>[ 99% 91145/91631] //art/build/apex:art-check-debug-apex-gen generate art-check-debug-apex-gen.dummy<br>--bitness=auto, trying to autodetect. This may be incorrect!<br>  Detected multilib<br>[100% 91631/91631] build out/target/product/blueline/obj/PACKAGING/check-all-partition-sizes_intermediates/check_all_partition_sizes_log<br><br><span class="hljs-comment">#### build completed successfully (02:55:07 (hh:mm:ss)) ####</span><br><br></code></pre></td></tr></table></figure><h2 id="三，烧录"><a href="#三，烧录" class="headerlink" title="三，烧录"></a>三，烧录</h2><h3 id="3-1-解锁OEM"><a href="#3-1-解锁OEM" class="headerlink" title="3.1 解锁OEM"></a>3.1 解锁OEM</h3><p>在开发者选项里打开<code>OEM unlocking</code>选项，如果置灰连上外网看看。如果是有锁的机器尝试找第三方解锁。</p><h3 id="3-2-bootloader解锁"><a href="#3-2-bootloader解锁" class="headerlink" title="3.2 bootloader解锁"></a>3.2 bootloader解锁</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">~/code/android11$ adb reboot bootloader<br>~/code/android11$ fashboot devices<br>xxxxxx<br>~/code/android11$ fastboot flashing unlock<br>~/code/android11$ fastboot reboot<br></code></pre></td></tr></table></figure><h3 id="3-3-烧录"><a href="#3-3-烧录" class="headerlink" title="3.3 烧录"></a>3.3 烧录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">~/code/android11$ <span class="hljs-built_in">export</span> ANDROID_PRODUCT_OUT=./out/target/product/blueline<br>~/code/android11$ fastboot flashall -w<br>...<br>File system <span class="hljs-built_in">type</span> raw not supported.<br>Erasing <span class="hljs-string">&#x27;metadata&#x27;</span>                                 OKAY [  0.007s]<br>Erase successful, but not automatically formatting.<br>File system <span class="hljs-built_in">type</span> raw not supported.<br>Rebooting                                          OKAY [  0.000s]<br>Finished. Total time: 101.511s<br><br></code></pre></td></tr></table></figure><p><img src="/img/blog/pixel3_aosp.png" alt="pixel 3"> </p>]]></content>
    
    
    <categories>
      
      <category>工具使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android系统</tag>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
