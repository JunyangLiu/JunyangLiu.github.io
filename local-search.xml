<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Pixel 3上Linux内核源码的下载，编译与烧录</title>
    <link href="/2021/01/02/aosp-kernel-build/"/>
    <url>/2021/01/02/aosp-kernel-build/</url>
    
    <content type="html"><![CDATA[<blockquote><p>操作系统：Windows 10 专业版 19042.685<br>编译机：WSL2 Ubuntu-18.04<br>手机：Google Pixel 3 Android 11<br>源码版本：kernel android-msm-crosshatch-4.9-android11</p></blockquote><p>官方教程地址<a href="https://source.android.com/setup/build/building-kernels#id-version">https://source.android.com/setup/build/building-kernels#id-version</a>, 已经写的很详细了, pixel 3建议下载的是android-msm-crosshatch-4.9-android11分支（此处是个坑，后面会提到）</p><h2 id="一，源码下载"><a href="#一，源码下载" class="headerlink" title="一，源码下载"></a>一，源码下载</h2><h3 id="1-1-AOSP源码下载"><a href="#1-1-AOSP源码下载" class="headerlink" title="1.1 AOSP源码下载"></a>1.1 AOSP源码下载</h3><p>依旧是将Google的地址<code>android.googlesource.com</code>替换清华的地址<code>aosp.tuna.tsinghua.edu.cn</code><br>加 <code>--depth 1</code> 控制git深度可以极大节省硬盘空间。最终.repo目录21G左右  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> REPO_URL=<span class="hljs-string">&#x27;https://mirrors.tuna.tsinghua.edu.cn/git/git-repo&#x27;</span><br>repo init --depth 1 -u https://aosp.tuna.tsinghua.edu.cn/kernel/manifest -b andro<br>id-msm-crosshatch-4.9-android11<br>repo sync -j20<br></code></pre></td></tr></table></figure><h2 id="二，编译"><a href="#二，编译" class="headerlink" title="二，编译"></a>二，编译</h2><h3 id="2-1编译kernel"><a href="#2-1编译kernel" class="headerlink" title="2.1编译kernel"></a>2.1编译kernel</h3><p>执行build/build.sh即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">~/code/kernel$ ./build/build.sh<br>========================================================<br> Copying modules files<br>  lib/modules/4.9.210-gdee0d123_audio-gee051ba/extra/wlan.ko<br>  lib/modules/4.9.210-gdee0d123_audio-gee051ba/kernel/drivers/input/touchscreen/stm/ftm5.ko<br>  lib/modules/4.9.210-gdee0d123_audio-gee051ba/kernel/drivers/input/touchscreen/sec_ts/sec_touch.ko<br>  lib/modules/4.9.210-gdee0d123_audio-gee051ba/kernel/drivers/input/touchscreen/heatmap.ko<br>  lib/modules/4.9.210-gdee0d123_audio-gee051ba/kernel/drivers/media/v4l2-core/videobuf2-vmalloc.ko<br>  lib/modules/4.9.210-gdee0d123_audio-gee051ba/kernel/drivers/media/v4l2-core/videobuf2-memops.ko<br>  lib/modules/4.9.210-gdee0d123_audio-gee051ba/kernel/techpack/audio/soc/pinctrl-wcd.ko<br>  lib/modules/4.9.210-gdee0d123_audio-gee051ba/kernel/techpack/audio/ipc/wcd-dsp-glink.ko<br>  lib/modules/4.9.210-gdee0d123_audio-gee051ba/kernel/techpack/audio/asoc/snd-soc-sdm845-max98927.ko<br>  lib/modules/4.9.210-gdee0d123_audio-gee051ba/kernel/techpack/audio/asoc/codecs/snd-soc-wcd9xxx.ko<br>  lib/modules/4.9.210-gdee0d123_audio-gee051ba/kernel/techpack/audio/asoc/codecs/snd-soc-cs35l36.ko<br>  lib/modules/4.9.210-gdee0d123_audio-gee051ba/kernel/techpack/audio/asoc/codecs/wcd-core.ko<br>  lib/modules/4.9.210-gdee0d123_audio-gee051ba/kernel/techpack/audio/asoc/codecs/snd-soc-wcd-spi.ko<br>  lib/modules/4.9.210-gdee0d123_audio-gee051ba/kernel/techpack/audio/asoc/codecs/wcd934x/snd-soc-wcd934x.ko<br>  lib/modules/4.9.210-gdee0d123_audio-gee051ba/kernel/techpack/audio/asoc/snd-soc-sdm845.ko<br>========================================================<br> Files copied to /home/huangqw/code/kernel/out/android-msm-pixel-4.9/dist<br></code></pre></td></tr></table></figure><h3 id="2-2-编译kernel报错"><a href="#2-2-编译kernel报错" class="headerlink" title="2.2 编译kernel报错"></a>2.2 编译kernel报错</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">/home/huangqw/code/kernel/private/msm-google/scripts/extract-cert.c:21:10: fatal error: <span class="hljs-string">&#x27;openssl/bio.h&#x27;</span> file not found<br><span class="hljs-comment">#include &lt;openssl/bio.h&gt;</span><br>         ^~~~~~~~~~~~~~~<br>1 error generated.<br>scripts/Makefile.host:101: recipe <span class="hljs-keyword">for</span> target <span class="hljs-string">&#x27;scripts/extract-cert&#x27;</span> failed<br>make[3]: *** [scripts/extract-cert] Error 1<br>make[3]: *** Waiting <span class="hljs-keyword">for</span> unfinished <span class="hljs-built_in">jobs</span>....<br></code></pre></td></tr></table></figure><p>解决：sudo apt-get install libssl-dev</p><h3 id="2-3-打包boot-img"><a href="#2-3-打包boot-img" class="headerlink" title="2.3 打包boot.img"></a>2.3 打包boot.img</h3><p>切换到android11源码目录，将TARGET_PREBUILT_KERNEL设置为kernel生成的Image.lz4文件的路径，官方文档提到的是Image.lz4-dtb，不用理会，android11生成的是Image.lz4。而且不单单是设置这个文件，整个out文件夹都会关联过去。<br>可以用<code>get_build_var BOARD_VENDOR_KERNEL_MODULES</code>命令查看对应的编译环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs log">~&#x2F;code&#x2F;android11$ source build&#x2F;envsetup.sh<br>~&#x2F;code&#x2F;android11$ lunch aosp_blueline-userdebug<br>~&#x2F;code&#x2F;android11$ export TARGET_PREBUILT_KERNEL&#x3D;&#x2F;home&#x2F;huangqw&#x2F;code&#x2F;kernel&#x2F;out&#x2F;android-msm-pixel-4.9&#x2F;dist&#x2F;Image.lz4<br>~&#x2F;code&#x2F;android11$ make -j16 bootimage<br>  PRODUCT_SOONG_NAMESPACES&#x3D;device&#x2F;google&#x2F;crosshatch hardware&#x2F;google&#x2F;av hardware&#x2F;google&#x2F;camera hardware&#x2F;google&#x2F;interfaces hardware&#x2F;google&#x2F;pixel hardware&#x2F;qcom&#x2F;sdm845 vendor&#x2F;google&#x2F;camera vendor&#x2F;qcom&#x2F;sdm845 vendor&#x2F;google&#x2F;interfaces vendor&#x2F;qcom&#x2F;blueline&#x2F;proprietary<br>  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>  Environment variable TARGET_PREBUILT_KERNEL was modified ( &#x3D;&gt; &#x2F;home&#x2F;huangqw&#x2F;code&#x2F;kernel&#x2F;out&#x2F;android-msm-pixel-4.9&#x2F;dist&#x2F;Image.lz4), regenerating...<br>  Environment variable TARGET_PREBUILT_KERNEL was modified ( &#x3D;&gt; &#x2F;home&#x2F;huangqw&#x2F;code&#x2F;kernel&#x2F;out&#x2F;android-msm-pixel-4.9&#x2F;dist&#x2F;Image.lz4), regenerating...<br>  [100% 222&#x2F;222] Target boot image from recovery: out&#x2F;target&#x2F;product&#x2F;blueline&#x2F;boot.img<br><br>#### build completed successfully (01:02 (mm:ss)) ####<br></code></pre></td></tr></table></figure><p>生成out/target/product/blueline/boot.img文件，如要重新编译原来的内核，将<code>export TARGET_PREBUILT_KERNEL=</code>置空重新编译就行</p><h2 id="三，烧录"><a href="#三，烧录" class="headerlink" title="三，烧录"></a>三，烧录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb reboot bootloader           <span class="hljs-comment">## 进入bootloader模式</span><br>fastboot boot boot.img          <span class="hljs-comment">## 从新内核启动，但不烧录，重启会失效</span><br>fastboot flash boot boot.img    <span class="hljs-comment">## 烧录新内核</span><br></code></pre></td></tr></table></figure><h2 id="四，错误"><a href="#四，错误" class="headerlink" title="四，错误"></a>四，错误</h2><p>经过上面的步骤，烧录的内核无法正常启动，无限重启，短暂的logcat中显示内核版本不对。</p><h3 id="4-1-查看内核版本"><a href="#4-1-查看内核版本" class="headerlink" title="4.1 查看内核版本"></a>4.1 查看内核版本</h3><p>手机内：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">adb</span> shell cat /proc/version<br><span class="hljs-attribute">Linux</span> version <span class="hljs-number">4</span>.<span class="hljs-number">9</span>.<span class="hljs-number">223</span>-g<span class="hljs-number">5</span>bded<span class="hljs-number">8</span>e<span class="hljs-number">40</span>b<span class="hljs-number">62</span>-ab<span class="hljs-number">6647920</span> (android-build@abfarm-us-west<span class="hljs-number">1</span>-c-<span class="hljs-number">0040</span>) (Android (<span class="hljs-number">6443078</span> based <span class="hljs-literal">on</span> r<span class="hljs-number">383902</span>) clang version <span class="hljs-number">11</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> (https://android.googlesource.com/toolchain/llvm-project b<span class="hljs-number">397</span>f<span class="hljs-number">81060</span>ce<span class="hljs-number">6</span>d<span class="hljs-number">701042</span>b<span class="hljs-number">782172</span>ed<span class="hljs-number">13</span>bee<span class="hljs-number">898</span>b<span class="hljs-number">79</span>)) #<span class="hljs-number">0</span> SMP PREEMPT Thu Jul <span class="hljs-number">2</span> <span class="hljs-number">03</span>:<span class="hljs-number">22</span>:<span class="hljs-number">48</span> UTC <span class="hljs-number">2020</span><br><span class="hljs-attribute">android</span>-msm-crosshatch-<span class="hljs-number">4</span>.<span class="hljs-number">9</span>-r-beta-<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>编译生成的：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">grep</span> -a &#x27;Linux version&#x27; Image.lz<span class="hljs-number">4</span><br><span class="hljs-attribute">Linux</span> version <span class="hljs-number">4</span>.<span class="hljs-number">9</span>.<span class="hljs-number">232</span> ...<br></code></pre></td></tr></table></figure><h3 id="4-2-切换对应的内核版本"><a href="#4-2-切换对应的内核版本" class="headerlink" title="4.2 切换对应的内核版本"></a>4.2 切换对应的内核版本</h3><p>根据版本号里的git id提示， 找到该版本对应的分支<a href="https://android.googlesource.com/kernel/msm/+/refs/heads/android-msm-crosshatch-4.9-r-beta-3%EF%BC%8C%E5%88%87%E6%8D%A2%E8%BF%87%E5%8E%BB%E7%BC%96%E8%AF%91%EF%BC%8C%E7%83%A7%E5%BD%95%E4%B9%8B%E5%90%8E%E7%B3%BB%E7%BB%9F%E5%8F%AF%E4%BB%A5%E8%B5%B7%E6%9D%A5%E4%BA%86%EF%BC%8C%E4%BD%86%E6%98%AF%E6%9C%89%E5%BE%88%E5%A4%9A%E5%A4%96%E8%AE%BE%E6%8A%A5%E9%94%99%EF%BC%9A%E8%93%9D%E7%89%99%EF%BC%8C%E9%9F%B3%E9%A2%91%E7%AD%89%EF%BC%8C%E7%95%8C%E9%9D%A2%E9%BB%91%E5%B1%8F%E3%80%82%E7%82%B9%E5%BC%80%E5%BA%94%E7%94%A8%E4%B9%8B%E5%90%8E%E7%B3%BB%E7%BB%9F%E5%B0%B1%E9%87%8D%E5%90%AF%E4%BA%86%E3%80%82%E5%90%8E%E9%9D%A2%E4%B9%9F%E5%B0%9D%E8%AF%95%E4%BA%86%E5%85%B6%E5%AE%83%E7%9A%84%E5%88%86%E6%94%AF%E7%89%88%E6%9C%AC%EF%BC%8C%E4%BE%9D%E6%97%A7%E6%98%AF%E4%B8%8D%E8%83%BD%E6%AD%A3%E5%B8%B8%E8%BF%90%E8%A1%8C%E3%80%82">https://android.googlesource.com/kernel/msm/+/refs/heads/android-msm-crosshatch-4.9-r-beta-3，切换过去编译，烧录之后系统可以起来了，但是有很多外设报错：蓝牙，音频等，界面黑屏。点开应用之后系统就重启了。后面也尝试了其它的分支版本，依旧是不能正常运行。</a>  </p><h2 id="五，问题总结"><a href="#五，问题总结" class="headerlink" title="五，问题总结"></a>五，问题总结</h2><p>失败的原因我猜测是内核版本和硬件库版本对不上。而且kernel库又没随aosp版本建分支和打tag, 直接就对应一个android11主分支，这个分支应该是随着最新的android11分支走的，我aosp 11的分支是最早的android-11.0.0_r1，估计我要切换到最新的rxx才能正常运行，由于切换到最新时间比较长，就先不折腾了，后续有空再弄。<br>给大家提供个失败的经验，但主要的流程我觉得是没有问题的。</p>]]></content>
    
    
    <categories>
      
      <category>工具使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android系统</tag>
      
      <tag>教程</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pixel 3上Android 11源码下载，编译与烧录</title>
    <link href="/2021/01/01/aosp-build/"/>
    <url>/2021/01/01/aosp-build/</url>
    
    <content type="html"><![CDATA[<blockquote><p>操作系统：Windows 10 专业版 19042.685<br>编译机：WSL2 Ubuntu-18.04<br>手机：Google Pixel 3<br>源码版本：AOSP android-11.0.0_r1 </p></blockquote><p>研究Android系统最好有一套AOSP源码和一台可以编译运行的机器，下面是我Google Pixel 3上编译官方源码的过程记录。</p><h2 id="一，源码下载"><a href="#一，源码下载" class="headerlink" title="一，源码下载"></a>一，源码下载</h2><h3 id="1-1-AOSP源码下载"><a href="#1-1-AOSP源码下载" class="headerlink" title="1.1 AOSP源码下载"></a>1.1 AOSP源码下载</h3><p>将Google的地址<code>https://android.googlesource.com/kernel/manifest</code>替换清华的地址<code>https://aosp.tuna.tsinghua.edu.cn/platform/manifest</code>下载速度更快<br>加 <code>--depth 1</code> 控制git深度可以极大节省硬盘空间。最终.repo目录21G左右  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> REPO_URL=<span class="hljs-string">&#x27;https://mirrors.tuna.tsinghua.edu.cn/git/git-repo&#x27;</span><br>repo init --depth 1 -u https://aosp.tuna.tsinghua.edu.cn/platform/manifest -b android-11.0.0_r1 <br>repo sync -j20<br></code></pre></td></tr></table></figure><h3 id="1-2-pixel-3专有硬件库下载"><a href="#1-2-pixel-3专有硬件库下载" class="headerlink" title="1.2 pixel 3专有硬件库下载"></a>1.2 pixel 3专有硬件库下载</h3><p>Android 11上不加硬件库会导致刷机后无限重启，但之前pixel 1时没有硬件库也能启动，这里踩了一个坑。<br>记得匹配好对应的BUILD_ID和代码, 查看build/core/build_id.mk文件，我的BUILD_ID=RP1A.200720.009，pixel 3的代号是blueline，所以对应的下载地址是：<br><a href="https://developers.google.cn/android/drivers?hl=zh-cn#bluelinerp1a.200720.009">https://developers.google.cn/android/drivers?hl=zh-cn#bluelinerp1a.200720.009</a><br>将两个文件下载到源码根目录，然后执行，会自动生成vendor文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">~/code/android11$ tar zxvf google_devices-blueline-rp1a.200720.009-6cd41940.tgz<br>~/code/android11$ tar zxvf qcom-blueline-rp1a.200720.009-f772c38c.tgz<br>~/code/android11$ ./extract-google_devices-blueline.sh<br>~/code/android11$ ./extract-qcom-blueline.sh<br></code></pre></td></tr></table></figure><h2 id="二，编译"><a href="#二，编译" class="headerlink" title="二，编译"></a>二，编译</h2><h3 id="2-1-编译环境"><a href="#2-1-编译环境" class="headerlink" title="2.1 编译环境"></a>2.1 编译环境</h3><p>编译环境搭建参考官方文档：<a href="https://source.android.com/setup/build/initializing">https://source.android.com/setup/build/initializing</a><br>我用的win10应用市场下载的wsl2 ubuntu-18.04的虚拟机，挺好用的，不过比较耗内存，建议将内存加到32G</p><h3 id="2-2-编译"><a href="#2-2-编译" class="headerlink" title="2.2 编译"></a>2.2 编译</h3><p>i5-9600k的机器耗时3个小时，有点久。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">~/code/android11$ <span class="hljs-built_in">source</span> build/envsetup.sh<br>~/code/android11$ lunch aosp_blueline-userdebug<br>~/code/android11$ make -j16<br>...<br>[ 99% 90776/91631] //frameworks/base/packages/SystemUI:SystemUI r8 [common]<br>Invalid descriptor (deserialized from Kotlin @Metadata): (LLandroid/animation/Animator;;)L;<br>Invalid descriptor (deserialized from Kotlin @Metadata): (LLandroid/animation/Animator;;)L;<br>[ 99% 91145/91631] //art/build/apex:art-check-debug-apex-gen generate art-check-debug-apex-gen.dummy<br>--bitness=auto, trying to autodetect. This may be incorrect!<br>  Detected multilib<br>[100% 91631/91631] build out/target/product/blueline/obj/PACKAGING/check-all-partition-sizes_intermediates/check_all_partition_sizes_log<br><br><span class="hljs-comment">#### build completed successfully (02:55:07 (hh:mm:ss)) ####</span><br><br></code></pre></td></tr></table></figure><h2 id="三，烧录"><a href="#三，烧录" class="headerlink" title="三，烧录"></a>三，烧录</h2><h3 id="3-1-解锁OEM"><a href="#3-1-解锁OEM" class="headerlink" title="3.1 解锁OEM"></a>3.1 解锁OEM</h3><p>在开发者选项里打开<code>OEM unlocking</code>选项，如果置灰连上外网看看。如果是有锁的机器尝试找第三方解锁。</p><h3 id="3-2-bootloader解锁"><a href="#3-2-bootloader解锁" class="headerlink" title="3.2 bootloader解锁"></a>3.2 bootloader解锁</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">~/code/android11$ adb reboot bootloader<br>~/code/android11$ fashboot devices<br>xxxxxx<br>~/code/android11$ fastboot flashing unlock<br>~/code/android11$ fastboot reboot<br></code></pre></td></tr></table></figure><h3 id="3-3-烧录"><a href="#3-3-烧录" class="headerlink" title="3.3 烧录"></a>3.3 烧录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">~/code/android11$ <span class="hljs-built_in">export</span> ANDROID_PRODUCT_OUT=./out/target/product/blueline<br>~/code/android11$ fastboot flashall -w<br>...<br>File system <span class="hljs-built_in">type</span> raw not supported.<br>Erasing <span class="hljs-string">&#x27;metadata&#x27;</span>                                 OKAY [  0.007s]<br>Erase successful, but not automatically formatting.<br>File system <span class="hljs-built_in">type</span> raw not supported.<br>Rebooting                                          OKAY [  0.000s]<br>Finished. Total time: 101.511s<br><br></code></pre></td></tr></table></figure><p><img src="/img/blog/pixel3_aosp.png" alt="pixel 3"> </p>]]></content>
    
    
    <categories>
      
      <category>工具使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android系统</tag>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
